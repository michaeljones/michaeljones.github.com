<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DevBlog</title><link href="http://michaeljones.github.io/blog/" rel="alternate"></link><link href="http://michaeljones.github.io/blog/feeds/article.atom.xml" rel="self"></link><id>http://michaeljones.github.io/blog/</id><updated>2013-10-29T00:00:00+13:00</updated><entry><title>A Beginner's Encounter with a Haskell Library</title><link href="http://michaeljones.github.io/blog/posts/2013/10/29/a-beginners-encounter-with-a-haskell-library/" rel="alternate"></link><updated>2013-10-29T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-29:posts/2013/10/29/a-beginners-encounter-with-a-haskell-library/</id><summary type="html">&lt;p&gt;I am new to Haskell and as a programming exercise I am attempting to rewrite my
&lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; utility program which I use to switch between common directories in my
shell.&lt;/p&gt;
&lt;p&gt;It is currently written in Python and uses the curses library to provide a
terminal user interface for selecting a directory from a list which is then
written to a file. The program works with an alias which tends changes directory
into the contents of that file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
alias c='$HOME/bin/jump-wrapper; cd `cat /tmp/jump.tmp`'
&lt;/pre&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jump-wrapper&lt;/span&gt;&lt;/tt&gt; sources the appropriate Python virtualenv and then runs
the actual Python script.&lt;/p&gt;
&lt;p&gt;The current Python version is a &amp;quot;good enough&amp;quot; implementation with no real error
detection or fault tolerance. It doesn't really have to be tolerant as I control
the input and the simplicity of the script makes it easy to debug.&lt;/p&gt;
&lt;p&gt;It feels like a good test project for Haskell as it involves a simple UI and
reading data from a &lt;a class="reference external" href="http://yaml.org"&gt;yaml&lt;/a&gt; file which is used for configuration.&lt;/p&gt;
&lt;div class="section" id="the-interface"&gt;
&lt;h2&gt;The Interface&lt;/h2&gt;
&lt;p&gt;For the interface, after some googling, I've opted for the &lt;a class="reference external" href="http://hackage.haskell.org/package/vty"&gt;vty&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="http://hackage.haskell.org/package/vty-ui"&gt;vty-ui&lt;/a&gt;
modules, mostly the latter, though that is built on the former.&lt;/p&gt;
&lt;p&gt;The vty-ui library has excellent &lt;a class="reference external" href="http://jtdaugherty.github.io/vty-ui/manuals/vty-ui-users-manual-1.6.pdf"&gt;documentation&lt;/a&gt; and so after working through
their example and reading a little more I have a basic program which present two
options in a list in a terminal UI and allows me to exit from it all with &lt;tt class="docutils literal"&gt;q&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.Widgets.All&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.Attributes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;def_attr&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.LLInput&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;KASCII&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;System.Exit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;exitSuccess&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Text&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;

    &lt;span class="c1"&gt;-- Create new list&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newList&lt;/span&gt; &lt;span class="n"&gt;def_attr&lt;/span&gt;

    &lt;span class="c1"&gt;-- Populate options&lt;/span&gt;
    &lt;span class="n"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;centered&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

    &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newFocusGroup&lt;/span&gt;
    &lt;span class="n"&gt;addToFocusGroup&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newCollection&lt;/span&gt;
    &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;addToCollection&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;

    &lt;span class="c1"&gt;-- Focus group event handlers&lt;/span&gt;
    &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;onKeyPressed&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;

    &lt;span class="n"&gt;runUi&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;defaultContext&lt;/span&gt;

&lt;span class="c1"&gt;-- Callback for exiting via &amp;#39;q&amp;#39;&lt;/span&gt;
&lt;span class="nf"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;KASCII&lt;/span&gt; &lt;span class="n"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;shutdownUi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;exitSuccess&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;         &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Most of this is not fabulously interesting but is included for completeness. The
relevant section here is really this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- Create new list&lt;/span&gt;
&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newList&lt;/span&gt; &lt;span class="n"&gt;def_attr&lt;/span&gt;

&lt;span class="c1"&gt;-- Populate options&lt;/span&gt;
&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is where we create the list and populate it with the options. This is the
part that we're interested in for this article. The plan is to replace it with
code which will read a yaml file and dynamically populate the list based on the
contents of the file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-file"&gt;
&lt;h2&gt;The File&lt;/h2&gt;
&lt;p&gt;The yaml config file looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- - [sph, /home/mike/root/projects/sph]
- - [alembic-fs, /home/mike/root/projects/alembic-fs]
- - [profile, /home/mike/root/projects/profile]
  - [blog, /home/mike/root/projects/profile/blog]
- - [lastcontact, /home/mike/root/projects/lastcontact]
- - [rigcontrols, /home/mike/root/projects/rigcontrols]
- - [blog, /home/mike/root/projects/profile/source]
- - [jump-hs, /home/mike/root/projects/jump-hs]
- - [breathe, /home/mike/root/projects/sphinx/breathe]
- - [dojo, /home/mike/root/projects/dojo]
- - [taglist, /home/mike/root/projects/taglist]
- - [git.pde, /home/mike/root/projects/presentations/git]
&lt;/pre&gt;
&lt;p&gt;It is a list of list of lists in which:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Top Level&lt;/strong&gt; is a list of the projects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Second Level&lt;/strong&gt; is a list of sub targets within those projects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Third Level&lt;/strong&gt; is a pair of &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;directory&lt;/tt&gt;. The &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; is
displayed in the user interface and the directory is what should eventually be
written to the output file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-start"&gt;
&lt;h2&gt;A Start&lt;/h2&gt;
&lt;p&gt;Let's google &amp;quot;haskell yaml&amp;quot;. Sweet, a &lt;a class="reference external" href="http://stackoverflow.com/questions/13059806/reading-yaml-in-haskell"&gt;Reading Yaml in Haskell&lt;/a&gt; question on
stackoverflow comes up first, though nothing else on the first two pages looks
like anything more than package references without further documentation. The
top answer to the question recommends the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; and &lt;a class="reference external" href="http://hackage.haskell.org/package/HsSyck"&gt;HsSyck&lt;/a&gt; modules with a slight
preference towards the former.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reading-the-yaml-data"&gt;
&lt;h2&gt;Reading the Yaml Data&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml-0.8.5.1/docs/Data-Yaml.html"&gt;yaml module docs&lt;/a&gt; are pretty thin for a beginner which is why I'm writing
this piece. At this stage in my Haskell journey I can't see any obvious places
to start.&lt;/p&gt;
&lt;p&gt;From an imperative programming perspective, I would generally expect to provide
a file path, a stream or a string to some kind of function and get back a data
structure which containers all the information from the yaml file. This is might
not be suitable for incredibly large files but then yaml tends to be used for
the configuration file end of the spectrum rather than large data sets.&lt;/p&gt;
&lt;p&gt;Checking through the functions shows &lt;tt class="docutils literal"&gt;decodeFile&lt;/tt&gt; to take a file path and
return some kind of data in an IO action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;decodeFile&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;FromJSON&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;FilePath&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, reasonable starting point. Let's add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Yaml&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To the import section and add:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;results&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodeFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jumprc&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To the top of the &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; do-block just to try it out.&lt;/p&gt;
&lt;p&gt;In hindsight, I can see that those people reading along, and wondering exactly
what I thought the compiler was going to do with that &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; in the type
signature, were correct to be confused. However, as my naive self still learning
the language I was armed with nothing more than this error message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src/Main.hs:16:16:
    No instance for (Y.FromJSON a0)
      arising from a use of `Y.decodeFile'
    In a stmt of a 'do' block: results &amp;lt;- Y.decodeFile &amp;quot;jumprc&amp;quot;
    In the expression:
      do { results &amp;lt;- Y.decodeFile &amp;quot;jumprc&amp;quot;;
&lt;/pre&gt;
&lt;p&gt;Which frankly isn't that useful to me even now that I know the answer. I think
it is basically trying to say &amp;quot;I'm trying to compile this and I'm left holding
this &lt;tt class="docutils literal"&gt;Y.FromJSON a0&lt;/tt&gt; thing and I've no idea what to do with it.&amp;quot; The &lt;tt class="docutils literal"&gt;a0&lt;/tt&gt; is
perhaps some kind of clue that it doesn't have enough information to figure out
all the types as there certainly isn't an &lt;tt class="docutils literal"&gt;a0&lt;/tt&gt; type declared in my program.&lt;/p&gt;
&lt;p&gt;Ok, so that type signature above? That is going to take &lt;tt class="docutils literal"&gt;FilePath&lt;/tt&gt; and return
something with an specified type &lt;tt class="docutils literal"&gt;a&lt;/tt&gt; which is an instance of the typeclass
&lt;tt class="docutils literal"&gt;FromJSON&lt;/tt&gt;.  I'm still pretty clueless but yaml module docs have a &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt;
data type which is instance of the &lt;tt class="docutils literal"&gt;FromJSON&lt;/tt&gt; typeclass so we try that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;results&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodeFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jumprc&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works. Sweet. What can we do with it? I've no idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="digging-into-the-yaml-data"&gt;
&lt;h2&gt;Digging into the Yaml Data&lt;/h2&gt;
&lt;p&gt;I've never drilled into a Haskell data structure before. No even really sure
what it looks like. Let's simply the input data a bit and print it. New input
data in the yaml file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- - [sph, /home/mike/root/projects/sph]
- - [profile, /home/mike/root/projects/profile]
  - [blog, /home/mike/root/projects/profile/blog]
&lt;/pre&gt;
&lt;p&gt;Print statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;print&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Just (Array (fromList [Array (fromList [Array (fromList [String &amp;quot;sph&amp;quot;,String
&amp;quot;/home/mike/root/projects/sph&amp;quot;])]),Array (fromList [Array (fromList [String
&amp;quot;profile&amp;quot;,String &amp;quot;/home/mike/root/projects/profile&amp;quot;]),Array (fromList [String
&amp;quot;blog&amp;quot;,String &amp;quot;/home/mike/root/projects/profile/blog&amp;quot;])])]))
&lt;/pre&gt;
&lt;p&gt;Not exactly readable but it gives us a start. First up it is wrapped in a
&lt;tt class="docutils literal"&gt;Maybe&lt;/tt&gt; which we should be expecting as we asked for it as &lt;tt class="docutils literal"&gt;IO ( Maybe
Y.Value )&lt;/tt&gt; and then unwrapped the IO action with the &lt;tt class="docutils literal"&gt;&amp;lt;-&lt;/tt&gt; in the do-block.
Inspecting the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml-0.8.5.1/docs/Data-Yaml.html#t:Value"&gt;docs&lt;/a&gt; we can see that the &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt; data type as several
different constructor types include &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; which as a single piece of data
which is a &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; of more yaml &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt; data. We can see from the Vector
docs that it is an instance of the &lt;tt class="docutils literal"&gt;Functor&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Foldable&lt;/tt&gt; typeclasses
along with many others which means we can do various map and fold operations
over it.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;fromList&lt;/tt&gt; is &lt;a class="reference external" href="http://hackage.haskell.org/package/vector-0.10.9.1/docs/Data-Vector.html#v:fromList"&gt;documented&lt;/a&gt; as a conversion function between a list and a
&lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;fromList&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I've yet to figure out how or why &lt;tt class="docutils literal"&gt;show&lt;/tt&gt;, which is what &lt;tt class="docutils literal"&gt;print&lt;/tt&gt; uses,
would choose to represent a &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; as &lt;tt class="docutils literal"&gt;fromList &lt;span class="pre"&gt;[...]&lt;/span&gt;&lt;/tt&gt; but it isn't
unreasonable.&lt;/p&gt;
&lt;p&gt;Ok, so baby steps. We can remove the &lt;tt class="docutils literal"&gt;Maybe&lt;/tt&gt; wrapper by writing a function and
pattern matching against the contents. So we change our code to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;results&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodeFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jumprc&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we get everything inside the &lt;tt class="docutils literal"&gt;Just&lt;/tt&gt; as expected:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Array (fromList [Array (fromList [Array (fromList [String &amp;quot;sph&amp;quot;,String
&amp;quot;/home/mike/root/projects/sph&amp;quot;])]),Array (fromList [Array (fromList [String
&amp;quot;profile&amp;quot;,String &amp;quot;/home/mike/root/projects/profile&amp;quot;]),Array (fromList [String
&amp;quot;blog&amp;quot;,String &amp;quot;/home/mike/root/projects/profile/blog&amp;quot;])])])
&lt;/pre&gt;
&lt;p&gt;Makes sense. Well what if we aim to print each entry in the top array on a new
line. We can change to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then implement &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt;. We could try something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterall, we read above that the &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; is a functor is we can map over it.
However, on compiling it complains about the return type of the second
definition of &lt;tt class="docutils literal"&gt;process&lt;/tt&gt;, but that's weird as we're sure that's correct. We're
just using &lt;tt class="docutils literal"&gt;return&lt;/tt&gt; to create a minimal &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt; action with no interesting
content. So really, we're screwing up the signature of the first definition and
then the compiler is telling us that the second definition doesn't match the
first. But we want the first definition to match the second and we know what
that is so we add a type signature to tell the compiler what is meant to be
going on:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code-block:: haskell
&lt;/pre&gt;
&lt;blockquote&gt;
process :: Maybe a -&amp;gt; IO ()
process (Just v) = processTop v
process _        = return ()&lt;/blockquote&gt;
&lt;p&gt;Excellent, now it is telling us something we want to know:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
src/Main.hs:16:20:
    Couldn't match type `IO ()' with `()'
    Expected type: IO ()
      Actual type: IO (IO ())
    In the return type of a call of `processTop'
    In the expression: processTop v
&lt;/pre&gt;
&lt;p&gt;I am not entirely sure what this means but I am going to avoid finding out for
the moment as that is a lot of &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt;'s in a part of the code which could well
be pure. We're much better return a string array from &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; and
printing it in our &lt;tt class="docutils literal"&gt;process&lt;/tt&gt; function than pushing our non-pure &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt; code
further and further into the call stack.&lt;/p&gt;
&lt;p&gt;So we change our &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; to a dummy implementation which returns a string
array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;line one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;line two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And change &lt;tt class="docutils literal"&gt;process&lt;/tt&gt; to print out the result by mapping &lt;tt class="docutils literal"&gt;putStrLn&lt;/tt&gt; over the
result of &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt;. We use &lt;tt class="docutils literal"&gt;mapM_&lt;/tt&gt; as it applies a function of type &lt;tt class="docutils literal"&gt;a
&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; m b&lt;/tt&gt; over a &lt;tt class="docutils literal"&gt;[a]&lt;/tt&gt; and returns a simple empty &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt; action which will
print out all the lines we want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great, so now we have &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; which is nice and pure and now it just
needs to actually work, y'know, rather than ignoring its inputs.&lt;/p&gt;
&lt;p&gt;A reasonable first step would be to pattern match against the &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt;
constructor of the &lt;tt class="docutils literal"&gt;Value&lt;/tt&gt; date type as we're currently only passing a
&lt;tt class="docutils literal"&gt;Value&lt;/tt&gt;. That will give as the actual array to play with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we want to convert the data, &lt;tt class="docutils literal"&gt;a&lt;/tt&gt;, in that &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; to a list and map
&lt;tt class="docutils literal"&gt;show&lt;/tt&gt; over it to convert each entry to a representative string. We saw
earlier that the data in the &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; is a &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; so we grab the
appropriate module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Vector&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And use the &lt;tt class="docutils literal"&gt;toList&lt;/tt&gt; method to convert it. Then we are free to &lt;tt class="docutils literal"&gt;map&lt;/tt&gt;
&lt;tt class="docutils literal"&gt;show&lt;/tt&gt; over the result so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run this, we get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Array (fromList [Array (fromList [String &amp;quot;sph&amp;quot;,String &amp;quot;/home/mike/roo...
Array (fromList [Array (fromList [String &amp;quot;profile&amp;quot;,String &amp;quot;/home/mike...
&lt;/pre&gt;
&lt;p&gt;ie. one line per item in our top list. Progress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="digging-further"&gt;
&lt;h2&gt;Digging Further&lt;/h2&gt;
&lt;p&gt;We're getting a bit of a hang of this, so now we should start figuring out what
we actually want to get back from this function. What would make our lives
easier for setting up this list?&lt;/p&gt;
&lt;p&gt;It would seem reasonable to aim for a list of pairs where the pairs of the
&lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;directory&lt;/tt&gt; parts of the Yaml file. We would then be able to
iterate over this list and add pairs into our interface.&lt;/p&gt;
&lt;p&gt;So we want to reduce our hierachy down to a single list of pairs. It seems
reasonable that we could use a &lt;tt class="docutils literal"&gt;fold&lt;/tt&gt; to achieve this with the accumulator
being a new list which we add the pairs to.&lt;/p&gt;
&lt;p&gt;To make things a little more readable we add some nicer types for the components
of our pairs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Name&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can then change &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;processGroup&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which extracts the &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; value from the array as before and folds over
it using the &lt;tt class="docutils literal"&gt;processGroup&lt;/tt&gt; function with an empty list as an accumulator.
Ultimately it aims to return a list of &lt;tt class="docutils literal"&gt;Name&lt;/tt&gt;-&lt;tt class="docutils literal"&gt;Directory&lt;/tt&gt; pairs as stated in
the new type signature.&lt;/p&gt;
&lt;p&gt;We use &lt;tt class="docutils literal"&gt;V.foldl&lt;/tt&gt; rather than &lt;tt class="docutils literal"&gt;foldl&lt;/tt&gt; as this needs to operate on a &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt;
rather than a list. I am not sure what the &lt;tt class="docutils literal"&gt;fmap&lt;/tt&gt; equivalent of &lt;tt class="docutils literal"&gt;foldl&lt;/tt&gt; is,
ie. a &lt;tt class="docutils literal"&gt;foldl&lt;/tt&gt; function that can be applied to any instance of the &lt;tt class="docutils literal"&gt;Foldable&lt;/tt&gt;
typeclass.&lt;/p&gt;
&lt;p&gt;So, &lt;tt class="docutils literal"&gt;processGroup&lt;/tt&gt;? That kind of sits in the middle and doesn't do much more
than repeat the &lt;tt class="docutils literal"&gt;foldl&lt;/tt&gt; on bottom level of our hierarchy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processGroup&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processGroup&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;processPair&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We pass the &lt;tt class="docutils literal"&gt;xs&lt;/tt&gt; list from the argument through to the fold so that we
continue to add to the same list. Otherwise we extract the &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; data from
the &lt;tt class="docutils literal"&gt;Array&lt;/tt&gt; as standard and all is good.&lt;/p&gt;
&lt;p&gt;Then &lt;tt class="docutils literal"&gt;processPair&lt;/tt&gt; does something a little more interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;processPair&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processPair&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We extract the &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt; data, then use &lt;tt class="docutils literal"&gt;V.toList&lt;/tt&gt; to convert the &lt;tt class="docutils literal"&gt;Vector&lt;/tt&gt;
to a standard list, and use a &lt;tt class="docutils literal"&gt;case&lt;/tt&gt; statement to pattern match against the
contents accounting for the situation where it is a two element list each being
a &lt;tt class="docutils literal"&gt;Y.String&lt;/tt&gt; value. In that case, we unpack the values into tuple which is
prepended to our results list.&lt;/p&gt;
&lt;p&gt;We're now returning a &lt;tt class="docutils literal"&gt;[(Name,Directory)]&lt;/tt&gt; which was can't map &lt;tt class="docutils literal"&gt;putStrLn&lt;/tt&gt;
over in our first &lt;tt class="docutils literal"&gt;process&lt;/tt&gt; function as &lt;tt class="docutils literal"&gt;putStrLn&lt;/tt&gt; expects a &lt;tt class="docutils literal"&gt;String&lt;/tt&gt;. So
we can change that to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt;        &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add run it and we get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(&amp;quot;blog&amp;quot;,&amp;quot;/home/mike/root/projects/profile/blog&amp;quot;)
(&amp;quot;profile&amp;quot;,&amp;quot;/home/mike/root/projects/profile&amp;quot;)
(&amp;quot;sph&amp;quot;,&amp;quot;/home/mike/root/projects/sph&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Done! A list of tuples, each with the data we're interested in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-to-the-interface"&gt;
&lt;h2&gt;Adding to the Interface&lt;/h2&gt;
&lt;p&gt;So now we're in a good place to add these entries to our UI list. We want to
replace the following hardcoded section with something which will add the
results from processing the yaml data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 2&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First we change &lt;tt class="docutils literal"&gt;process&lt;/tt&gt; so that it no longer attempts to print out the
results and just returns them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means it does little more than extract the data from the &lt;tt class="docutils literal"&gt;Maybe&lt;/tt&gt; and pass
it to &lt;tt class="docutils literal"&gt;processTop&lt;/tt&gt; to be processed.&lt;/p&gt;
&lt;p&gt;We then create a binding for our processed list of pairs in our &lt;tt class="docutils literal"&gt;main&lt;/tt&gt;
do-block for easy reading:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we want to add each pair in this list to our UI list. We know that the
line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice 1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Produces some kind of &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt;, probably empty as we're not attempting to use the
result. So if we're going to map over our pairs list, which seems reasonable to
handle each result, then we're going to want to &lt;tt class="docutils literal"&gt;mapM_&lt;/tt&gt; as we did before so
that we collect these &lt;tt class="docutils literal"&gt;IO&lt;/tt&gt; actions together properly and then ignore their
return.&lt;/p&gt;
&lt;p&gt;So we can:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;span class="nf"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addPairsToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;addPairsToList&lt;/tt&gt; is curried with the UI list widget to make it available
during the mapping. We implement &lt;tt class="docutils literal"&gt;addPairsToList&lt;/tt&gt; as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;addPairsToList&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Widget&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt; &lt;span class="kt"&gt;FormattedText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;addPairsToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which is a fairly direct resuse of the &lt;tt class="docutils literal"&gt;addToList&lt;/tt&gt; usage we had before which
came from the vty-ui documentation. We pattern match the input to get the
&lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;directory&lt;/tt&gt; from the pair and use them in their appropriate
locations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finished"&gt;
&lt;h2&gt;Finished&lt;/h2&gt;
&lt;p&gt;Well, not really. Further works needs to be done to write the list choice into a
file when the user selects it and to allow vim style &lt;tt class="docutils literal"&gt;j/k&lt;/tt&gt; navigation of the
list for my old habits. And it would be polite to add some error checking as
this is pretty much devoid of it. Still, we've done the yaml bit which is what
we came here to do. The final code as we have written it so far looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.Widgets.All&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.Attributes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;def_attr&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;Graphics.Vty.LLInput&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;KASCII&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt;           &lt;span class="nn"&gt;System.Exit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nf"&gt;exitSuccess&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Text&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Yaml&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="k"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.Vector&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;

&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Name&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

&lt;span class="nf"&gt;processPair&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processPair&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;case&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;

&lt;span class="nf"&gt;processGroup&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processGroup&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;processPair&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toList&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;processTop&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;V&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;processGroup&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processTop&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;

&lt;span class="nf"&gt;addPairsToList&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Widget&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt; &lt;span class="kt"&gt;FormattedText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;addPairsToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;plainText&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;

    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decodeFile&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;jumprc&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;-- Create new list&lt;/span&gt;
    &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newList&lt;/span&gt; &lt;span class="n"&gt;def_attr&lt;/span&gt;

    &lt;span class="c1"&gt;-- -- Populate options&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
    &lt;span class="n"&gt;mapM_&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addPairsToList&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;

    &lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;centered&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

    &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newFocusGroup&lt;/span&gt;
    &lt;span class="n"&gt;addToFocusGroup&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;newCollection&lt;/span&gt;
    &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;addToCollection&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="n"&gt;fg&lt;/span&gt;

    &lt;span class="c1"&gt;-- Focus group event handlers&lt;/span&gt;
    &lt;span class="n"&gt;fg&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;onKeyPressed&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;

    &lt;span class="n"&gt;runUi&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;defaultContext&lt;/span&gt;

&lt;span class="c1"&gt;-- Callback for exiting via &amp;#39;q&amp;#39;&lt;/span&gt;
&lt;span class="nf"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;KASCII&lt;/span&gt; &lt;span class="n"&gt;&amp;#39;q&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;shutdownUi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;exitSuccess&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;         &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope this meandering ramble of a post has been useful. It has cleared up some
issues for me and I hope it will help some people in the early stages of their
Haskell journey to see something broken down like this.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="haskell"></category></entry><entry><title>Setting Up a Haskell Project</title><link href="http://michaeljones.github.io/blog/posts/2013/10/27/setting-up-a-haskell-project/" rel="alternate"></link><updated>2013-10-27T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-27:posts/2013/10/27/setting-up-a-haskell-project/</id><summary type="html">&lt;p&gt;This is an attempt to share the my initial discoveries on how to set up a
Haskell project. My plan was to create a small project for an executable written
in Haskell and I didn't have the first idea where to start.&lt;/p&gt;
&lt;p&gt;I am new to the language and the ecosystem and this article wanders through my
discovery process. Skip straight to the &lt;a class="reference internal" href="#review"&gt;review&lt;/a&gt; for a summary.&lt;/p&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;This is well covered in the Haskell Wiki on &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/How_to_write_a_Haskell_program"&gt;How to write a Haskell program&lt;/a&gt;. I
had not found that guide at the time of working through this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-on-ubuntu-13-04"&gt;
&lt;h2&gt;Working on Ubuntu 13.04&lt;/h2&gt;
&lt;p&gt;Following some best practices advice, I wanted to get the &lt;a class="reference external" href="http://www.haskell.org/platform/"&gt;Haskell Platform&lt;/a&gt; to
act as a starting point for development. However for reasons that I do not fully
understand, Ubuntu 13.04 does not have a version of the Haskell platform (it
seems to be related to the version of ghc they decided to ship with.)&lt;/p&gt;
&lt;p&gt;Follow &lt;a class="reference external" href="http://askubuntu.com/a/316465"&gt;these&lt;/a&gt; instructions will get you a working copy of the Haskell Platform
along with the appropriate version of ghc. It takes a while to compile though!
I've installed these into the following directories:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$TOOLS/apps/ghc/ghc-7.6.3
$TOOLS/apps/haskell-platform/haskell-platform-2013.2.0.0
&lt;/pre&gt;
&lt;p&gt;For some value of &lt;tt class="docutils literal"&gt;$TOOLS&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-libraries"&gt;
&lt;h2&gt;Getting Libraries&lt;/h2&gt;
&lt;p&gt;With that going and in my environment, I made a new project directory for my
&lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; program:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir $WORK/jump
&lt;/pre&gt;
&lt;p&gt;My project is going to need a terminal interface and some googling comes up with
&lt;a class="reference external" href="http://hackage.haskell.org/package/vty"&gt;vty&lt;/a&gt; which appears to be some kind of ncurses equivalent for Haskell. So I try:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal install vty
&lt;/pre&gt;
&lt;p&gt;Which tells me to run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal update
&lt;/pre&gt;
&lt;p&gt;Which tells me that there is a new cabal-install package available that I should
update to. I initially install this to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$TOOLS/apps/haskell-packages/cabal-1.18.0.2
&lt;/pre&gt;
&lt;p&gt;Using:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cabal install --prefix=$TOOLS/apps/haskell-packages/cabal-1.18.0.2 cabal-install
&lt;/pre&gt;
&lt;p&gt;As I really like subfoldering things but this soon looks like it'll be too
awkward to manage in my immature set up as each package has its own libraries
and executables which means a lot of paths to figure out unless they are all
grouped together.&lt;/p&gt;
&lt;p&gt;So I install it straight to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$TOOLS/apps/haskell-packages
&lt;/pre&gt;
&lt;p&gt;This seems to work though the central install location bothers me in the same
way that any centralised collection of dependencies would. Something is going to
conflict at some point. What I really want is some kind of equivalent to
Python's &lt;a class="reference external" href="http://www.virtualenv.org"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ahhh-sandboxes"&gt;
&lt;h2&gt;Ahhh Sandboxes&lt;/h2&gt;
&lt;p&gt;Some googling thankfully finds cabal sandboxes which are very much what I am
looking forward. &lt;a class="reference external" href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html"&gt;This page&lt;/a&gt; is particularly helpful.&lt;/p&gt;
&lt;p&gt;So I follow the instructions and run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd $WORK/jump
$ cabal sandbox init
&lt;/pre&gt;
&lt;p&gt;This seems promising. A &lt;tt class="docutils literal"&gt;cabal install vty&lt;/tt&gt; now installs into this local
sandbox set up and I don't have to worry about shared collections of
dependencies anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compiling"&gt;
&lt;h2&gt;Compiling&lt;/h2&gt;
&lt;p&gt;Great, I'm ready to start coding. I make a a trivial &lt;tt class="docutils literal"&gt;Main.hs&lt;/tt&gt; file which
pulls in a &lt;a class="reference external" href="http://hackage.haskell.org/package/vty-ui"&gt;vty-ui&lt;/a&gt; module (it turns out the &lt;tt class="docutils literal"&gt;vty&lt;/tt&gt; is pretty low level and
vty-ui provide more friendly widgets for building interfaces.)&lt;/p&gt;
&lt;p&gt;So let's compile:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ghc --make Main.hs
&lt;/pre&gt;
&lt;p&gt;I haven't read up on the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--make&lt;/span&gt;&lt;/tt&gt; flag but it seems like the thing to do.
Anyway, this doesn't work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Main.hs:2:8:
    Could not find module `Graphics.Vty.Widgets.All'
    Use -v to see a list of the files searched for.
&lt;/pre&gt;
&lt;p&gt;No trouble, I've played around with toy &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; compiles before. I believe there
is a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-package&lt;/span&gt;&lt;/tt&gt; flag to provide paths to packages. Cool. Where is the package?
I run &lt;tt class="docutils literal"&gt;find&lt;/tt&gt; in the sandbox and get a lot of paths like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/vty-ui-1.6/Graphics/Vty/Widgets/All.hi
&lt;/pre&gt;
&lt;p&gt;My &lt;span class="strike"&gt;spidey&lt;/span&gt; programmer sense is tingling; I've not compiled much in
Haskell but that doesn't look like something to add to a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-package&lt;/span&gt;&lt;/tt&gt; flag. Too
much specific data in there. Just a hunch but I start looking around for
alternatives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cabal-build"&gt;
&lt;h2&gt;Cabal Build&lt;/h2&gt;
&lt;p&gt;I couldn't see much else to help with &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; and it seemed that we were
pretty neck deep in this sandbox so on reviewing the &lt;a class="reference external" href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html"&gt;sandbox guide&lt;/a&gt; from
earlier I saw the use of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal build
&lt;/pre&gt;
&lt;p&gt;Worth a crack, right? Well, yes, but this was the response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
cabal: No cabal file found.
Please create a package description file &amp;lt;pkgname&amp;gt;.cabal
&lt;/pre&gt;
&lt;p&gt;Ok, we need some kind of configuration file. No idea what goes in it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ touch jump.cabal
$ cabal build
&lt;/pre&gt;
&lt;p&gt;Progress:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
cabal: Using 'build-type: Custom' but there is no Setup.hs or Setup.lhs
script.
&lt;/pre&gt;
&lt;p&gt;Ok, lets have a look at the &lt;a class="reference external" href="https://github.com/coreyoconnor/vty"&gt;vty project&lt;/a&gt; on Github and see what they are
doing. They've got some kind of &lt;tt class="docutils literal"&gt;Setup.lhs&lt;/tt&gt; file with this in it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/usr/bin/env runhaskell
&amp;gt; import Distribution.Simple
&amp;gt; main = defaultMain
&lt;/pre&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; project I've been keeping an eye on has something similar. Ok:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat &amp;lt;&amp;lt; ENDCAT &amp;gt; Test.lhs
#!/usr/bin/env runhaskell
&amp;gt; import Distribution.Simple
&amp;gt; main = defaultMain
ENDCAT
$ cabal build
&lt;/pre&gt;
&lt;p&gt;And:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
[1 of 1] Compiling Main             ( Setup.lhs, dist/setup/Main.o )
Linking ./dist/setup/setup ...
Configuring ...
setup: No 'name' field.

No 'version' field.

No executables and no library found. Nothing to do.
&lt;/pre&gt;
&lt;p&gt;Ok. Expecting some kind of &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;version&lt;/tt&gt; fields. This is starting to
seem like progress so I look at the vty project &lt;tt class="docutils literal"&gt;vty.cabal&lt;/tt&gt; file and we see a
simple key value set up:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
name:    jump
version: 0.0.0
&lt;/pre&gt;
&lt;p&gt;Vim highlights this which is always a good sign:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal build
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
Configuring jump-0.0.0...
setup: No executables and no library found. Nothing to do.
&lt;/pre&gt;
&lt;p&gt;More cross referencing with github, this time the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; project and we add:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
executable jump
    main-is: Main.hs
&lt;/pre&gt;
&lt;p&gt;Now we're on to something. We've got a few more warnings but finally some
compile errors! Things are happening. Playing around shows that we need to add:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cabal-version:   &amp;gt;= 1.2
build-type:      Simple
&lt;/pre&gt;
&lt;p&gt;To silence the warnings. A guess-and-test shows that we no longer need the
&lt;tt class="docutils literal"&gt;Setup.lhs&lt;/tt&gt; file now that we have &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;build-type&lt;/span&gt;&lt;/tt&gt; set to &lt;tt class="docutils literal"&gt;Simple&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dependency-management"&gt;
&lt;h2&gt;Dependency Management&lt;/h2&gt;
&lt;p&gt;So those compile errors? They are actually pretty damned cool if you ask me. The
first one sets the tone:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Main.hs:1:1:
    Could not find module `Prelude'
    It is a member of the hidden package `base'.
    Perhaps you need to add `base' to the build-depends in your .cabal file.
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Prelude&lt;/tt&gt; is the essentially default, built-in functionality in Haskell. All
the functions that you're going to be using all the time so they are just there.
This is included by default in programs if you do a &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; invocation from the
command line or if you use &lt;tt class="docutils literal"&gt;ghci&lt;/tt&gt; but here we're being asked to explicitly
declare the dependency.&lt;/p&gt;
&lt;p&gt;Dependencies are a nightmare if they aren't managed properly so I am in favour
of this. Additionally it allows this &lt;tt class="docutils literal"&gt;base&lt;/tt&gt; package to changes its contents as
it versions up and projects can declare the version range they require to
operate.&lt;/p&gt;
&lt;p&gt;So the next addition is to add the build dependencies to the &lt;tt class="docutils literal"&gt;executable&lt;/tt&gt;
section:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
executable jump
    main-is: src/Main.hs
    build-depends: base &amp;gt;= 4 &amp;amp;&amp;amp; &amp;lt; 5
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;4&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;5&lt;/tt&gt; range is stoten from the &lt;tt class="docutils literal"&gt;yaml&lt;/tt&gt; project. This gets extended
in the typical prefixed comma style for further dependencies as the project
grows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
executable jump
    main-is: src/Main.hs
    build-depends: base &amp;gt;= 4 &amp;amp;&amp;amp; &amp;lt; 5
                 , vty-ui == 1.6
                 , vty == 4.7.3
                 , yaml == 0.8.5.1
                 , vector == 0.10.9.1
                 , text == 0.11.3.1
&lt;/pre&gt;
&lt;p&gt;Each time you need a new dependency you can &lt;tt class="docutils literal"&gt;cabal install&lt;/tt&gt; it into your
sandbox and then the &lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt; command will make sure you have it properly
specified in your &lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-review"&gt;
&lt;span id="review"&gt;&lt;/span&gt;&lt;h2&gt;In Review&lt;/h2&gt;
&lt;p&gt;If I wanted an introduction to Haskell project setup, coming from a C++ &amp;amp; Python
background, I would want something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Cabal sandboxes provide a virtualenv style enviroment for project development.
Your project root directory becomes your sandbox.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Your project &lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; file acts a little like a C++ project's &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;.
It also has some flavours of a Python project's &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A simple set up thankfully only requires a simple configuration file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Running &lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt; is roughly the equivalent of running &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; for a
C++ project and the cabal sandox/build set up is much easier to manage than a
Makefile with paths to all the libraries &amp;amp; headers you require for C++. It is
more of a build system than a Makefile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Build dependencies have to be explicitly declared or else &lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt;
won't compile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Your final &lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; file for a simple single file executable project will
look a little like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
name:            jump
version:         0.0.0
cabal-version:   &amp;gt;= 1.8
build-type:      Simple

executable jump
    main-is: src/Main.hs
    build-depends: base &amp;gt;= 4 &amp;amp;&amp;amp; &amp;lt; 5
                 , vty-ui == 1.6
                 , vty == 4.7.3
                 , yaml == 0.8.5.1
                 , vector == 0.10.9.1
                 , text == 0.11.3.1
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="haskell cabal"></category></entry><entry><title>Discovering Virtualenv</title><link href="http://michaeljones.github.io/blog/posts/2013/10/17/discovering-virtualenv/" rel="alternate"></link><updated>2013-10-17T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-17:posts/2013/10/17/discovering-virtualenv/</id><summary type="html">&lt;p&gt;I've used Python for around 8 years now. It is the main scripting language of
the visual effects industry so it gets used for all kinds of glue between other
programs and for interfaces for tools.&lt;/p&gt;
&lt;p&gt;In this role, I've never had to set up a server or do a deployment of a some
kind of complete unit and so whilst I have been aware of &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt; I've never
seen the need for it in my life.&lt;/p&gt;
&lt;p&gt;Of course, being a Python programmer, I've wanted to pull in third-party
libraries and it rarely seems appropriate, and is sometimes impossible, to
install them into the central &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; area on the machine. So a while ago, I
adopted the convention of maintaining a &lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt; folder in which I kept a
mini &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; hierarchy with my various required bits of software.&lt;/p&gt;
&lt;p&gt;This works because &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/"&gt;pip&lt;/a&gt; and &lt;a class="reference external" href="http://pythonhosted.org/distribute/easy_install.html"&gt;easy_install&lt;/a&gt; take some form of &lt;tt class="docutils literal"&gt;prefix&lt;/tt&gt; arguments
to allow for targeted installs. &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; requires the slightly less than obvious
use of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;install-option&lt;/span&gt;&lt;/tt&gt; flag like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install --install-option=&amp;quot;--prefix=$HOME/local&amp;quot; &amp;lt;module name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;But it is something you can get used to.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;$HOME/local/bin&lt;/tt&gt; and corresponding Python module install location are
then added to my &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; respectively in my &lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt; and
all is well. Kind of.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;This works pretty well. It is manageable. But the point where it started to fall
apart for me is when I wanted multiple versions of the same Python module
installed. This pretty much works. Python bootstraps tend to specify the exact
version they want via &lt;tt class="docutils literal"&gt;pkg_resources&lt;/tt&gt; and some installs provide bootstrap
scripts with different suffixes for the different versions so we can pick and
choose to some degree.&lt;/p&gt;
&lt;p&gt;The issue is that some modules, or tools, like &lt;a class="reference external" href="http://sphinx-doc.org"&gt;Sphinx&lt;/a&gt; provide a boostrapped
executable without a suffix or at least one which is called without the suffix
by standard workflow tools (like the Makefile that Sphinx generates.) The
trouble encountered here is that the module version that the executable ends up
being from the last version of Sphinx that you installed.&lt;/p&gt;
&lt;p&gt;This is fine in the usual update track of simply replacing the last version with
something newer and shinier, however it fails if you ever want to go back to the
last version. This is relevant in two ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;If you want to test a new alpha/beta release whilst still being able to go
back to stable.&lt;/li&gt;
&lt;li&gt;If you want to test a module under Python 3 whilst still being able to go
back to Python 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Fortunately other people have encountered this issue and written &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt;.
The design seems to be that instead of a single centralised install location for
all your Python modules, you create as many individual install locations as you
need for the different requirements of your projects.&lt;/p&gt;
&lt;p&gt;This might be one location per project, or a shared location for some projects
with common settings and other locations for more specific ones. How to do this?
Virtualenv makes it pretty easy. Once it is installed, just run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv &amp;lt;location name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv python-2.7.4
&lt;/pre&gt;
&lt;p&gt;And it will create a small &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; style hierarchy in a folder called
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-2.7.4&lt;/span&gt;&lt;/tt&gt; in your current directory. I haven't come up with a better
naming convention than the Python version yet but really it should be dictated
by the requirements of the project.&lt;/p&gt;
&lt;p&gt;Virtualenv creates the hierarchy, installs a copy of the current Python
interpreter that you are using, the standard library, as well as &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt; and sets up some scripts which can be sourced to add the
hierarchy to your environment. From there you source the environment
scripts as so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source python-2.7.4/bin/activate
&lt;/pre&gt;
&lt;p&gt;And then you're ready to go.&lt;/p&gt;
&lt;p&gt;The presence of &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; in this new location makes it fantastically easy to install new
modules to that virtual environment. The &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; script will put that
&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; executable on your &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; and invocations of it will install modules
to your new environment.&lt;/p&gt;
&lt;p&gt;So then, whenever you have a project with a particular set of requirements,
create a new virtualenv location, source the script, &lt;tt class="docutils literal"&gt;pip install&lt;/tt&gt; your
requirements and away you go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="minor-issues"&gt;
&lt;h2&gt;Minor Issues&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; scripts do not attempt to set or change your &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt;.  I
found this confusing at first but the new install of Python is already hardcoded
to check its local &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;site-packages&lt;/span&gt;&lt;/tt&gt; directory and everything is installed in
there so the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; is not required.&lt;/p&gt;
&lt;p&gt;This complicated things when transitioning from my previous set up to using more
virtualenv locations as my &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; was still set to my &lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt;
install which would be preferentially picked up over the modules in the
virtualenv which rather defeated the point.&lt;/p&gt;
&lt;p&gt;This is fixable by no longer setting a &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; in my &lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt; but then
my small workflow scripts started failing as they wanted to find modules in
&lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt; and that was no longer exposed. My approach to solving this is
simply to create some additional virtual environments under &lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt;
which represent a useful grab-bag of modules for these scripts and then write
a shell wrapper to source the virtual environment &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; script and then
run the original Python file.&lt;/p&gt;
&lt;p&gt;So my, previously Python, &lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; script has now become a shell script which
looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/sh

# Source the appropriate virtualenv
. /home/mike/local/python/python-2.7.4/bin/activate

jump-impl
&lt;/pre&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jump-impl&lt;/span&gt;&lt;/tt&gt; contains the contents of the original &lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; script and
happily finds the &lt;tt class="docutils literal"&gt;yaml&lt;/tt&gt; module that I've installed to the virtual environment
in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/home/mike/local/python/python-2.7.4&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry></feed>