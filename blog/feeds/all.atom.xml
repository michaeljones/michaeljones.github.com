<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DevBlog</title><link href="http://michaeljones.github.io/blog/" rel="alternate"></link><link href="http://michaeljones.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>http://michaeljones.github.io/blog/</id><updated>2013-10-27T00:00:00+13:00</updated><entry><title>End of Week 3</title><link href="http://michaeljones.github.io/blog/posts/2013/10/27/end-of-week-3/" rel="alternate"></link><updated>2013-10-27T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-27:posts/2013/10/27/end-of-week-3/</id><summary type="html">&lt;div class="section" id="weekend"&gt;
&lt;h2&gt;Weekend&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Watched &lt;a class="reference external" href="http://yow.eventer.com/events/1004/talks/1054"&gt;Escape From the Ivory Tower&lt;/a&gt; presentation by Simon Peyton Jones. It
is an approachable easy-listening style talk which gives the history of the
development of Haskell and the goals of the language. No prior knowledge of
the language required though, as always, it helps.&lt;/li&gt;
&lt;li&gt;Wrote a &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/27/setting-up-a-haskell-project/"&gt;blog post&lt;/a&gt; about stumbling through a Haskell Project set up. The
content is perhaps better covered on the &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/How_to_write_a_Haskell_program"&gt;Haskell Wiki&lt;/a&gt; though I found that too
late.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-in-review"&gt;
&lt;h2&gt;Week in Review&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Definitely making progress with Haskell but still nowhere near comfortable
with it. Clueless on how to begin most tasks but at least I can slowly battle
my way towards something. Work needs to continue both via exercising the
knowledge I have and also by moving on to other tutorials. &lt;a class="reference external" href="http://book.realworldhaskell.org/"&gt;Real World
Haskell&lt;/a&gt;
&amp;amp; &lt;a class="reference external" href="https://www.fpcomplete.com/school/haskell-fast-hard"&gt;Learn Haskell Hard &amp;amp; Fast&lt;/a&gt; might be reasonable guides for this stage,
especially the former&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Improved the performance of &lt;a class="reference external" href="https://github.com/EverZen/RigControls"&gt;RigControls&lt;/a&gt; and began to toy with the idea of
tests but, as with any unfamiliar codebase which isn't designed for testing,
there isn't an easy starting place. Might need more effort than first hoped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Fixed an issue with &lt;a class="reference external" href="https://github.com/michaeljones/sphinx-to-github"&gt;Sphinx-to-Github&lt;/a&gt; regarding unicode handling. Gave me some
motivation to read up on unicode a little more and the best practices
surrounding it and its use in Python. Lessons learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Data is &lt;em&gt;decoded&lt;/em&gt; from a particular character-set into unicode point data and
&lt;em&gt;encoded&lt;/em&gt; the other way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You have to write files with a particular encoding. You don't write unicode
point data to a file, or rather you do, but in one of any number of
character-sets. There isn't a default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You can't find out the encoding of a file unless it has a Byte Order Mark
(BOM) which tells you. In which case, you need to worry about removing that
BOM and not interpreting it as text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ideally you should know the encoding of the files you are trying to read, if
you don't you're basicall left trying to guess. UTF-8 is a good first guess.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You should try to decode as soon as possible so that you're handling
proper unicode strings in your code rather than ASCII with potentially
invalid bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Python 2.x attempts to read all files as ASCII by default which is the
source of some head aches with Python 2.x and unicode.&lt;/p&gt;
&lt;p&gt;You can convert either by decoding the string that you have read or by
reading via &lt;tt class="docutils literal"&gt;codecs.open&lt;/tt&gt; which provides an option for the encoding as an
argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Python 3.x defaults to reading files at UTF-8 by default and all standard
strings or unicode by default with the &lt;tt class="docutils literal"&gt;bytestring&lt;/tt&gt; type there to handle
encoded data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;UTF-8 is best for content which is going to be largely ASCII.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;UTF-16 is best for some languages or purposes where the majority of the
characters fits into 2 bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;UTF-32 is best for the rest. It is also the fastest to deal with as all
characters takes the same amount of memory so indexing into the data is
clean and obvious, however it takes up 4 times as much space as UTF-8 for
ASCII characters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Setting Up a Haskell Project</title><link href="http://michaeljones.github.io/blog/posts/2013/10/27/setting-up-a-haskell-project/" rel="alternate"></link><updated>2013-10-27T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-27:posts/2013/10/27/setting-up-a-haskell-project/</id><summary type="html">&lt;p&gt;This is an attempt to share the my initial discoveries on how to set up a
Haskell project. My plan was to create a small project for an executable written
in Haskell and I didn't have the first idea where to start.&lt;/p&gt;
&lt;p&gt;I am new to the language and the ecosystem and this article wanders through my
discovery process. Skip straight to the &lt;a class="reference internal" href="#review"&gt;review&lt;/a&gt; for a summary.&lt;/p&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;This is well covered in the Haskell Wiki on &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/How_to_write_a_Haskell_program"&gt;How to write a Haskell program&lt;/a&gt;. I
had not found that guide at the time of working through this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-on-ubuntu-13-04"&gt;
&lt;h2&gt;Working on Ubuntu 13.04&lt;/h2&gt;
&lt;p&gt;Following some best practices advice, I wanted to get the &lt;a class="reference external" href="http://www.haskell.org/platform/"&gt;Haskell Platform&lt;/a&gt; to
act as a starting point for development. However for reasons that I do not fully
understand, Ubuntu 13.04 does not have a version of the Haskell platform (it
seems to be related to the version of ghc they decided to ship with.)&lt;/p&gt;
&lt;p&gt;Follow &lt;a class="reference external" href="http://askubuntu.com/a/316465"&gt;these&lt;/a&gt; instructions will get you a working copy of the Haskell Platform
along with the appropriate version of ghc. It takes a while to compile though!
I've installed these into the following directories:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$TOOLS/apps/ghc/ghc-7.6.3
$TOOLS/apps/haskell-platform/haskell-platform-2013.2.0.0
&lt;/pre&gt;
&lt;p&gt;For some value of &lt;tt class="docutils literal"&gt;$TOOLS&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-libraries"&gt;
&lt;h2&gt;Getting Libraries&lt;/h2&gt;
&lt;p&gt;With that going and in my environment, I made a new project directory for my
&lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; program:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir $WORK/jump
&lt;/pre&gt;
&lt;p&gt;My project is going to need a terminal interface and some googling comes up with
&lt;a class="reference external" href="http://hackage.haskell.org/package/vty"&gt;vty&lt;/a&gt; which appears to be some kind of ncurses equivalent for Haskell. So I try:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal install vty
&lt;/pre&gt;
&lt;p&gt;Which tells me to run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal update
&lt;/pre&gt;
&lt;p&gt;Which tells me that there is a new cabal-install package available that I should
update to. I initially install this to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$TOOLS/apps/haskell-packages/cabal-1.18.0.2
&lt;/pre&gt;
&lt;p&gt;Using:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cabal install --prefix=$TOOLS/apps/haskell-packages/cabal-1.18.0.2 cabal-install
&lt;/pre&gt;
&lt;p&gt;As I really like subfoldering things but this soon looks like it'll be too
awkward to manage in my immature set up as each package has its own libraries
and executables which means a lot of paths to figure out unless they are all
grouped together.&lt;/p&gt;
&lt;p&gt;So I install it straight to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$TOOLS/apps/haskell-packages
&lt;/pre&gt;
&lt;p&gt;This seems to work though the central install location bothers me in the same
way that any centralised collection of dependencies would. Something is going to
conflict at some point. What I really want is some kind of equivalent to
Python's &lt;a class="reference external" href="http://www.virtualenv.org"&gt;virtualenv&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ahhh-sandboxes"&gt;
&lt;h2&gt;Ahhh Sandboxes&lt;/h2&gt;
&lt;p&gt;Some googling thankfully finds cabal sandboxes which are very much what I am
looking forward. &lt;a class="reference external" href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html"&gt;This page&lt;/a&gt; is particularly helpful.&lt;/p&gt;
&lt;p&gt;So I follow the instructions and run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd $WORK/jump
$ cabal sandbox init
&lt;/pre&gt;
&lt;p&gt;This seems promising. A &lt;tt class="docutils literal"&gt;cabal install vty&lt;/tt&gt; now installs into this local
sandbox set up and I don't have to worry about shared collections of
dependencies anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compiling"&gt;
&lt;h2&gt;Compiling&lt;/h2&gt;
&lt;p&gt;Great, I'm ready to start coding. I make a a trivial &lt;tt class="docutils literal"&gt;Main.hs&lt;/tt&gt; file which
pulls in a &lt;a class="reference external" href="http://hackage.haskell.org/package/vty-ui"&gt;vty-ui&lt;/a&gt; module (it turns out the &lt;tt class="docutils literal"&gt;vty&lt;/tt&gt; is pretty low level and
vty-ui provide more friendly widgets for building interfaces.)&lt;/p&gt;
&lt;p&gt;So let's compile:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ghc --make Main.hs
&lt;/pre&gt;
&lt;p&gt;I haven't read up on the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--make&lt;/span&gt;&lt;/tt&gt; flag but it seems like the thing to do.
Anyway, this doesn't work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Main.hs:2:8:
    Could not find module `Graphics.Vty.Widgets.All'
    Use -v to see a list of the files searched for.
&lt;/pre&gt;
&lt;p&gt;No trouble, I've played around with toy &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; compiles before. I believe there
is a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-package&lt;/span&gt;&lt;/tt&gt; flag to provide paths to packages. Cool. Where is the package?
I run &lt;tt class="docutils literal"&gt;find&lt;/tt&gt; in the sandbox and get a lot of paths like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/vty-ui-1.6/Graphics/Vty/Widgets/All.hi
&lt;/pre&gt;
&lt;p&gt;My &lt;span class="strike"&gt;spidey&lt;/span&gt; programmer sense is tingling; I've not compiled much in
Haskell but that doesn't look like something to add to a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-package&lt;/span&gt;&lt;/tt&gt; flag. Too
much specific data in there. Just a hunch but I start looking around for
alternatives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cabal-build"&gt;
&lt;h2&gt;Cabal Build&lt;/h2&gt;
&lt;p&gt;I couldn't see much else to help with &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; and it seemed that we were
pretty neck deep in this sandbox so on reviewing the &lt;a class="reference external" href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html"&gt;sandbox guide&lt;/a&gt; from
earlier I saw the use of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal build
&lt;/pre&gt;
&lt;p&gt;Worth a crack, right? Well, yes, but this was the response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
cabal: No cabal file found.
Please create a package description file &amp;lt;pkgname&amp;gt;.cabal
&lt;/pre&gt;
&lt;p&gt;Ok, we need some kind of configuration file. No idea what goes in it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ touch jump.cabal
$ cabal build
&lt;/pre&gt;
&lt;p&gt;Progress:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
cabal: Using 'build-type: Custom' but there is no Setup.hs or Setup.lhs
script.
&lt;/pre&gt;
&lt;p&gt;Ok, lets have a look at the &lt;a class="reference external" href="https://github.com/coreyoconnor/vty"&gt;vty project&lt;/a&gt; on Github and see what they are
doing. They've got some kind of &lt;tt class="docutils literal"&gt;Setup.lhs&lt;/tt&gt; file with this in it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/usr/bin/env runhaskell
&amp;gt; import Distribution.Simple
&amp;gt; main = defaultMain
&lt;/pre&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; project I've been keeping an eye on has something similar. Ok:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cat &amp;lt;&amp;lt; ENDCAT &amp;gt; Test.lhs
#!/usr/bin/env runhaskell
&amp;gt; import Distribution.Simple
&amp;gt; main = defaultMain
ENDCAT
$ cabal build
&lt;/pre&gt;
&lt;p&gt;And:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
[1 of 1] Compiling Main             ( Setup.lhs, dist/setup/Main.o )
Linking ./dist/setup/setup ...
Configuring ...
setup: No 'name' field.

No 'version' field.

No executables and no library found. Nothing to do.
&lt;/pre&gt;
&lt;p&gt;Ok. Expecting some kind of &lt;tt class="docutils literal"&gt;name&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;version&lt;/tt&gt; fields. This is starting to
seem like progress so I look at the vty project &lt;tt class="docutils literal"&gt;vty.cabal&lt;/tt&gt; file and we see a
simple key value set up:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
name:    jump
version: 0.0.0
&lt;/pre&gt;
&lt;p&gt;Vim highlights this which is always a good sign:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cabal build
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
Configuring jump-0.0.0...
setup: No executables and no library found. Nothing to do.
&lt;/pre&gt;
&lt;p&gt;More cross referencing with github, this time the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; project and we add:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
executable jump
    main-is: Main.hs
&lt;/pre&gt;
&lt;p&gt;Now we're on to something. We've got a few more warnings but finally some
compile errors! Things are happening. Playing around shows that we need to add:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cabal-version:   &amp;gt;= 1.2
build-type:      Simple
&lt;/pre&gt;
&lt;p&gt;To silence the warnings. A guess-and-test shows that we no longer need the
&lt;tt class="docutils literal"&gt;Setup.lhs&lt;/tt&gt; file now that we have &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;build-type&lt;/span&gt;&lt;/tt&gt; set to &lt;tt class="docutils literal"&gt;Simple&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dependency-management"&gt;
&lt;h2&gt;Dependency Management&lt;/h2&gt;
&lt;p&gt;So those compile errors? They are actually pretty damned cool if you ask me. The
first one sets the tone:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Main.hs:1:1:
    Could not find module `Prelude'
    It is a member of the hidden package `base'.
    Perhaps you need to add `base' to the build-depends in your .cabal file.
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Prelude&lt;/tt&gt; is the essentially default, built-in functionality in Haskell. All
the functions that you're going to be using all the time so they are just there.
This is included by default in programs if you do a &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; invocation from the
command line or if you use &lt;tt class="docutils literal"&gt;ghci&lt;/tt&gt; but here we're being asked to explicitly
declare the dependency.&lt;/p&gt;
&lt;p&gt;Dependencies are a nightmare if they aren't managed properly so I am in favour
of this. Additionally it allows this &lt;tt class="docutils literal"&gt;base&lt;/tt&gt; package to changes its contents as
it versions up and projects can declare the version range they require to
operate.&lt;/p&gt;
&lt;p&gt;So the next addition is to add the build dependencies to the &lt;tt class="docutils literal"&gt;executable&lt;/tt&gt;
section:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
executable jump
    main-is: src/Main.hs
    build-depends: base &amp;gt;= 4 &amp;amp;&amp;amp; &amp;lt; 5
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;4&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;5&lt;/tt&gt; range is stoten from the &lt;tt class="docutils literal"&gt;yaml&lt;/tt&gt; project. This gets extended
in the typical prefixed comma style for further dependencies as the project
grows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
executable jump
    main-is: src/Main.hs
    build-depends: base &amp;gt;= 4 &amp;amp;&amp;amp; &amp;lt; 5
                 , vty-ui == 1.6
                 , vty == 4.7.3
                 , yaml == 0.8.5.1
                 , vector == 0.10.9.1
                 , text == 0.11.3.1
&lt;/pre&gt;
&lt;p&gt;Each time you need a new dependency you can &lt;tt class="docutils literal"&gt;cabal install&lt;/tt&gt; it into your
sandbox and then the &lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt; command will make sure you have it properly
specified in your &lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-review"&gt;
&lt;span id="review"&gt;&lt;/span&gt;&lt;h2&gt;In Review&lt;/h2&gt;
&lt;p&gt;If I wanted an introduction to Haskell project setup, coming from a C++ &amp;amp; Python
background, I would want something like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Cabal sandboxes provide a virtualenv style enviroment for project development.
Your project root directory becomes your sandbox.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Your project &lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; file acts a little like a C++ project's &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt;.
It also has some flavours of a Python project's &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A simple set up thankfully only requires a simple configuration file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Running &lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt; is roughly the equivalent of running &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; for a
C++ project and the cabal sandox/build set up is much easier to manage than a
Makefile with paths to all the libraries &amp;amp; headers you require for C++. It is
more of a build system than a Makefile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Build dependencies have to be explicitly declared or else &lt;tt class="docutils literal"&gt;cabal build&lt;/tt&gt;
won't compile.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Your final &lt;tt class="docutils literal"&gt;.cabal&lt;/tt&gt; file for a simple single file executable project will
look a little like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
name:            jump
version:         0.0.0
cabal-version:   &amp;gt;= 1.8
build-type:      Simple

executable jump
    main-is: src/Main.hs
    build-depends: base &amp;gt;= 4 &amp;amp;&amp;amp; &amp;lt; 5
                 , vty-ui == 1.6
                 , vty == 4.7.3
                 , yaml == 0.8.5.1
                 , vector == 0.10.9.1
                 , text == 0.11.3.1
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="haskell cabal"></category></entry><entry><title>Journal - Day 15</title><link href="http://michaeljones.github.io/blog/posts/2013/10/25/journal-day-15/" rel="alternate"></link><updated>2013-10-25T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-25:posts/2013/10/25/journal-day-15/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue my quest to parse Yaml in Haskell. Or rather, use the data returned
from the Yaml parser library I'm using (&lt;a class="reference external" href="http://hackage.haskell.org/package/yaml-0.8.5"&gt;yaml&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Try to write at least one test for &lt;a class="reference external" href="http://github.com/EverZen/RigControls"&gt;RigControls&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continued exploration of the Yaml library but without much success. Determined
that perhaps it would be productive to journal my failings and hopefully
eventual success at using this library. Sadly this decision came after a
little progress so I will have to try to reproduce those first steps in an
appropriately clueless way.&lt;/li&gt;
&lt;li&gt;Failed to write any tests. Dammit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 14</title><link href="http://michaeljones.github.io/blog/posts/2013/10/24/journal-day-14/" rel="alternate"></link><updated>2013-10-24T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-24:posts/2013/10/24/journal-day-14/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue working on vty-ui example to at least emulate the functionality of my
&lt;a class="reference external" href="https://github.com/michaeljones/dotfiles/blob/master/bin/jump"&gt;jump&lt;/a&gt; helper script.&lt;/li&gt;
&lt;li&gt;Set up basic testsuite for the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project.&lt;/li&gt;
&lt;li&gt;Improve &amp;amp; update information on michaeljones.github.io.&lt;/li&gt;
&lt;li&gt;Grab the source code for &lt;a class="reference external" href="https://github.com/gibiansky/IHaskell"&gt;IHaskell&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;More work on the Jump project including starting to look at the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; package
for reading my jump config file. As a beginner, I am finding it a struggle to
start with new packages when they don't have a tutorial section. The tests
only get you so far. A simple start guide would not go amiss.&lt;/p&gt;
&lt;p&gt;Perhaps this will improve with experience. Perhaps Haskell APIs have a
structure which I am not familiar enough with yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Installed &lt;a class="reference external" href="http://nose2.readthedocs.org/en/latest/index.html"&gt;nose2&lt;/a&gt; to the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; virtualenv I have and wrote a trivial
test to test that it was working.&lt;/p&gt;
&lt;p&gt;Required getting PyQt4 working in the virtualenv which, for me, involved
directly copying the system installed packages as recommended in this
stackoverflow &lt;a class="reference external" href="http://stackoverflow.com/questions/1961997/is-it-possible-to-add-pyqt4-pyside-packages-on-a-virtualenv-sandbox"&gt;response&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Investigated Unicode best practices in response to a sphinx-to-github &lt;a class="reference external" href="https://github.com/michaeljones/sphinx-to-github/pull/7"&gt;ticket&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Updated my development copy of michaeljones.github.io to include more
information for potential future employers. To act as more of a CV.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Did not grab the souce code for &lt;a class="reference external" href="https://github.com/gibiansky/IHaskell"&gt;IHaskell&lt;/a&gt;. Might give up on that one for the
moment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 13</title><link href="http://michaeljones.github.io/blog/posts/2013/10/23/journal-day-13/" rel="alternate"></link><updated>2013-10-23T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-23:posts/2013/10/23/journal-day-13/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Improve &amp;amp; update information on michaeljones.github.io.&lt;/li&gt;
&lt;li&gt;Grab the source code for &lt;a class="reference external" href="http://gibiansky.github.io/IHaskell/"&gt;IHaskell&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Experiment with the &lt;a class="reference external" href="http://hackage.haskell.org/package/vty-ui"&gt;vty-ui&lt;/a&gt; library&lt;/li&gt;
&lt;li&gt;Read the final chapter of Learn You a Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Did not update michaeljones.github.io.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Did not grab the source for &lt;a class="reference external" href="http://gibiansky.github.io/IHaskell/"&gt;IHaskell&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I read the final chapter of Learn You a Haskell which is introducing the idea
of Zippers. It doesn't really wrap up the tutorial with any kind of conclusion
which makes it feel like there might be more to come. The FAQ also promises a
set of accompanying exercises at some point but I think it might have been
promising that for a while.&lt;/p&gt;
&lt;p&gt;Still by far the best Haskell tutorial I've come across.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Read the majority of the documentation for the &lt;a class="reference external" href="http://hackage.haskell.org/package/vty-ui"&gt;vty-ui&lt;/a&gt; library and built a
basic &lt;abbr&gt;TUI &amp;lt;Text User Interface&amp;gt;&lt;/abbr&gt; application which uses the List
functionality from vty-ui. Quite exciting to be writing something new,
interpreting compile errors and getting things to work. Still early days but
feels great to be coding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Watched a talk on &lt;a class="reference external" href="http://www.infoq.com/presentations/io-functional-side-effects"&gt;Purely Functional I/O&lt;/a&gt; which covers the pure nature of
Haskell and introducing some pure ideas into Scala. It is a solid presentation
which gently covered some very interesting ideas. Again, I wonder how people
are meant to watch it without a basic understanding of Haskell but maybe it is
fine. A couple of &lt;em&gt;Ah-Ha!&lt;/em&gt; moments for me: firstly his three stage code
refactoring example, going from:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cafe&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;buyCoffee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CreditCard&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Coffee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Coffee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="nc"&gt;Payments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cup&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where the payment mechanism is hard coded through a singleton which means
limited modularity and difficulty in testing as you can't substitute a mock
payments system. To:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cafe&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;buyCoffee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CreditCard&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Payments&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Coffee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Coffee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;charge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cup&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where the payments mechanism is an explicit dependency of the method and has
to be injected, which allows for greater modularity, but still isn't as
flexible as it could be as you cannot easily combine payments. To:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cafe&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;buyCoffee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CreditCard&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Coffee&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Charge&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Coffee&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cup&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Charge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In which the &lt;tt class="docutils literal"&gt;buyCoffee&lt;/tt&gt; mechanism is only responsible for returning a
&lt;tt class="docutils literal"&gt;Charge&lt;/tt&gt; object which can be separately processed and combined if desired
before the final payment is done.&lt;/p&gt;
&lt;p&gt;I'm very used to the second set of code from a writing code to test as covered
in &lt;a class="reference external" href="http://misko.hevery.com/"&gt;Miško Hevery's&lt;/a&gt; &lt;a class="reference external" href="https://www.youtube.com/playlist?list=PLBDAB2BA83BB6588E"&gt;Clean Code&lt;/a&gt; Google Tech Talks, but the third set
feels like it might just be another step forward and something well worth
taking on board. The pure functional angle here is that the method only
creates new objects it doesn't change any state but the pay offs are perhaps
larger than I would associate with that simple statement.&lt;/p&gt;
&lt;p&gt;The second &lt;em&gt;Ah-Ha!&lt;/em&gt; moment was hearing again how Haskell handles IO code and
side-effects. I felt my understanding click a step deeper with this talk.
Mostly his focus on the fact that IO is possible in a pure way and that is
whilst Haskell has functions that perform IO and therefore have side-effects,
they are never executed by the programmers code. Rather, the programmer has
pure code which passes these IO performing functions around as data and then
Haskell runtime, whatever is managing the execution of &lt;tt class="docutils literal"&gt;main&lt;/tt&gt;, ultimately
executes them and passes their results back into the pure code as part of the
evaluation of the program.&lt;/p&gt;
&lt;p&gt;He emphasises that pure code is referentially transparent which means that
every time you run a function with the same arguments it returns the same
results. Haskell perhaps can be viewed as running pure functions which return
functions which will do side-effecting actions, but as long as we're only
talking about returning functions that, if run, would have side-effects, rather
than actually running those functions ourselves then we are still pure. The
functions are data that we're passing around which can be done in a manner
oblivious to their underlying impure nature.&lt;/p&gt;
&lt;p&gt;To keep a track of what is going on we label these functions with the IO type
but that is little more than a convention aided by the type system. IO doesn't
bestow magical powers on the functions.&lt;/p&gt;
&lt;p&gt;This all may or may not be wrong but it is my current understanding.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 12</title><link href="http://michaeljones.github.io/blog/posts/2013/10/22/journal-day-12/" rel="alternate"></link><updated>2013-10-22T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-22:posts/2013/10/22/journal-day-12/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read &lt;a class="reference external" href="http://coldwa.st/e/blog/2013-08-20-Cabal-sandbox.html"&gt;cabal sandbox post&lt;/a&gt; and set up a sandbox area for my Haskell dev
project. Cabal sandboxes are meant to mimic the Python virtualenv
functionality.&lt;/li&gt;
&lt;li&gt;Take a closer look at the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project and try to improve the curve
performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read the cabal sandbox post and set up a basic sandbox area.&lt;/li&gt;
&lt;li&gt;Talked through some changes to the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project with my brother.
Conferring on coding style and some subtleties of Python.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Everzen/RigControls/pull/3"&gt;Improved curve performance&lt;/a&gt; in &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; by switching to a recalculate on
demand rather than recalculate on change strategy.&lt;/li&gt;
&lt;li&gt;Read the first page of the &lt;a class="reference external" href="https://www.fpcomplete.com/school/haskell-fast-hard/haskell-fast-hard-part-1"&gt;Learn Haskell Hard &amp;amp; Fast&lt;/a&gt; tutorial. In
comparison to LYAH, it feels like it is going at a lightning pace and lacks
the thoroughness required, however it might round out in future sections. It
is certainly tempting to try to write a Haskell tutorial which explicitly
skips over particular details early on in order to get to more practical
examples. It will be interesting to see if this tutorial takes that approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 11</title><link href="http://michaeljones.github.io/blog/posts/2013/10/21/journal-day-11/" rel="alternate"></link><updated>2013-10-21T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-21:posts/2013/10/21/journal-day-11/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read through chapter 13 of Learn You a Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read through the chapter of Learn You a Haskell. This is the first chapter
where I'm beginning to feel unsure of how solid my understanding has been so
far. It all just about holds together but I'm aware of how little practical
application I've attempted with the knowledge so far.&lt;/li&gt;
&lt;li&gt;Found a new &lt;a class="reference external" href="http://yannesposito.com/Scratch/en/blog/Haskell-the-Hard-Way/#introduction"&gt;Haskell tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Refactored use of &lt;tt class="docutils literal"&gt;eval&lt;/tt&gt; in the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project to use a dictorionary
based factory instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>End of Week 2</title><link href="http://michaeljones.github.io/blog/posts/2013/10/20/end-of-week-2/" rel="alternate"></link><updated>2013-10-20T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-20:posts/2013/10/20/end-of-week-2/</id><summary type="html">&lt;div class="section" id="weekend"&gt;
&lt;h2&gt;Weekend&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decided to start looking at the &lt;a class="reference external" href="https://github.com/coreyoconnor/vty"&gt;Vty&lt;/a&gt; module for Haskell based on the
half-remembered fact that the &lt;a class="reference external" href="https://github.com/yi-editor/yi"&gt;Yi text editor&lt;/a&gt; uses it for its terminal
front end.&lt;/li&gt;
&lt;li&gt;Talked through my changes to &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; with my brother.&lt;/li&gt;
&lt;li&gt;Found a &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/All_About_Monads"&gt;monad tutorial&lt;/a&gt; on the Haskell wiki.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-in-review"&gt;
&lt;h2&gt;Week in Review&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;My attitude towards learning Haskell has shifted as I begin to understand a
little of its scope. Initial frustration at the helplessness I felt at not
being able to get anything done has been replaced with an understanding that
Haskell is not trivial to dive into and a little patience goes a long way.&lt;/p&gt;
&lt;p&gt;In particular the Learn You a Haskell guide feels particularly brilliantly
laid out and paced. The concepts are built up gradually in a very manageable
way and, whilst I am finding it hard to think of interesting programs to write
with the knowledge I have, there is a definite sense of progress which is
enough to keep the enthusiasm going.&lt;/p&gt;
&lt;p&gt;That said, my attempt at the weekend to pick up and write even the most basic
program using the &lt;a class="reference external" href="https://github.com/coreyoconnor/vty"&gt;Vty&lt;/a&gt; module was an education in the different between theory
and practice. It is one thing to read a guide book and quite another to find
your way. Still, a little foolish googling and a few stackoverflow questions
later and I am starting to see a little clearer.&lt;/p&gt;
&lt;p&gt;A key issue was that the Vty module does not come with how-to style
documentation [1] and going from the careful breaks downs of the Learn You a
Haskell guide to the currently-still-alien pages of the library documentation
on Haddock was a rather large step. Concepts that I had read about were now
being presented with unfamiliar content and without the careful reminders
needed to take it all on board. Still, progress was made, even if in the most
basic sense and I am a little better equipped than before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Getting into the &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;RigControls&lt;/a&gt; project is still primarily reminding me how
little indepth experience I have with Qt. It is also curious to dive into an
existing code base with the intention of cleaning it up some what. Nice to
have the permission but a fresh lesson in how difficult it can be to tackle a
new and relatively undocumented code base.&lt;/p&gt;
&lt;p&gt;Possible refactoring would be aided by have test cases but I still have
trouble understanding how to best tackle those in a GUI application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Whilst I am curious to attempt to contribute to a large project like Libre
Office, or perhaps 0ad, I am finding it a little daunting and easily telling
myself that there is no rush with other commitments at the moment. I think
that it fair. I'd be a fool to take on too much and fail to make significant
progress in any direction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Supporting incoming user requests on Breathe continues to be of interest. It
feels productive to keep pushing it forward a little and to try to keep
updates clean and useful. I still lack the motivation to take a crack at some
larger issues and reports whilst I have other things to focus on but I am
tempted to at least start working through the back log a little rather than
only picking up new tickets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[1]&lt;/td&gt;&lt;td&gt;It is possibly too low level for that with the &lt;a class="reference external" href="http://jtdaugherty.github.io/vty-ui/"&gt;Vty-UI&lt;/a&gt; library filling
need for a widget library on top of the core Vty module.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 10</title><link href="http://michaeljones.github.io/blog/posts/2013/10/18/journal-day-10/" rel="alternate"></link><updated>2013-10-18T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-18:posts/2013/10/18/journal-day-10/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read through chapter 12 of Learn You a Haskell. Starting on the big scary
&amp;quot;monads&amp;quot;&lt;/li&gt;
&lt;li&gt;Grab the 0ad source code from &lt;a class="reference external" href="https://github.com/0ad/0ad"&gt;github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Investigate the &lt;a class="reference external" href="http://librelist.com/browser//breathe/2013/10/17/doxygenclass-+-members-fails/"&gt;issue&lt;/a&gt; reported on the Breathe mailing list.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished chapter 12. Monads do not seem very scary when explained well. Of
course, I might not have understood them at all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I grabbed the 0ad source code. The git repository is over a gigabyte of data.
It is vaguely alarming. I haven't tried to compile it yet but spent a little
time scanning over the directories to get a feel for the complexity. It is
impressively larger than anything I've dealt with before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Managed to get a fix out for the reported issue in Breathe will a little back
and forth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Watch a &lt;a class="reference external" href="https://www.youtube.com/watch?v=b9FagOVqxmI"&gt;Google TechTalk&lt;/a&gt; on Haskell. A brief introduction by &lt;a class="reference external" href="https://github.com/mzero"&gt;mzero&lt;/a&gt; which is
really quite a whirlwind tour. I don't think I would recommend it as an
introduction but it settled in very nicely to the stage of learning I'm at as
a quick reinforcement of ideas that I have seen so far.&lt;/p&gt;
&lt;p&gt;I think the time required to properly explain the various common abstractions
in Haskell makes it enormously hard to do a deep and meaningful
no-prior-knowledge-required talk about the language.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Discovering Virtualenv</title><link href="http://michaeljones.github.io/blog/posts/2013/10/17/discovering-virtualenv/" rel="alternate"></link><updated>2013-10-17T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-17:posts/2013/10/17/discovering-virtualenv/</id><summary type="html">&lt;p&gt;I've used Python for around 8 years now. It is the main scripting language of
the visual effects industry so it gets used for all kinds of glue between other
programs and for interfaces for tools.&lt;/p&gt;
&lt;p&gt;In this role, I've never had to set up a server or do a deployment of a some
kind of complete unit and so whilst I have been aware of &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt; I've never
seen the need for it in my life.&lt;/p&gt;
&lt;p&gt;Of course, being a Python programmer, I've wanted to pull in third-party
libraries and it rarely seems appropriate, and is sometimes impossible, to
install them into the central &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; area on the machine. So a while ago, I
adopted the convention of maintaining a &lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt; folder in which I kept a
mini &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; hierarchy with my various required bits of software.&lt;/p&gt;
&lt;p&gt;This works because &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/"&gt;pip&lt;/a&gt; and &lt;a class="reference external" href="http://pythonhosted.org/distribute/easy_install.html"&gt;easy_install&lt;/a&gt; take some form of &lt;tt class="docutils literal"&gt;prefix&lt;/tt&gt; arguments
to allow for targeted installs. &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; requires the slightly less than obvious
use of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;install-option&lt;/span&gt;&lt;/tt&gt; flag like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install --install-option=&amp;quot;--prefix=$HOME/local&amp;quot; &amp;lt;module name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;But it is something you can get used to.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;$HOME/local/bin&lt;/tt&gt; and corresponding Python module install location are
then added to my &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; respectively in my &lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt; and
all is well. Kind of.&lt;/p&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;This works pretty well. It is manageable. But the point where it started to fall
apart for me is when I wanted multiple versions of the same Python module
installed. This pretty much works. Python bootstraps tend to specify the exact
version they want via &lt;tt class="docutils literal"&gt;pkg_resources&lt;/tt&gt; and some installs provide bootstrap
scripts with different suffixes for the different versions so we can pick and
choose to some degree.&lt;/p&gt;
&lt;p&gt;The issue is that some modules, or tools, like &lt;a class="reference external" href="http://sphinx-doc.org"&gt;Sphinx&lt;/a&gt; provide a boostrapped
executable without a suffix or at least one which is called without the suffix
by standard workflow tools (like the Makefile that Sphinx generates.) The
trouble encountered here is that the module version that the executable ends up
being from the last version of Sphinx that you installed.&lt;/p&gt;
&lt;p&gt;This is fine in the usual update track of simply replacing the last version with
something newer and shinier, however it fails if you ever want to go back to the
last version. This is relevant in two ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;If you want to test a new alpha/beta release whilst still being able to go
back to stable.&lt;/li&gt;
&lt;li&gt;If you want to test a module under Python 3 whilst still being able to go
back to Python 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Fortunately other people have encountered this issue and written &lt;a class="reference external" href="http://www.virtualenv.org/en/latest/"&gt;virtualenv&lt;/a&gt;.
The design seems to be that instead of a single centralised install location for
all your Python modules, you create as many individual install locations as you
need for the different requirements of your projects.&lt;/p&gt;
&lt;p&gt;This might be one location per project, or a shared location for some projects
with common settings and other locations for more specific ones. How to do this?
Virtualenv makes it pretty easy. Once it is installed, just run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv &amp;lt;location name&amp;gt;
&lt;/pre&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
virtualenv python-2.7.4
&lt;/pre&gt;
&lt;p&gt;And it will create a small &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; style hierarchy in a folder called
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-2.7.4&lt;/span&gt;&lt;/tt&gt; in your current directory. I haven't come up with a better
naming convention than the Python version yet but really it should be dictated
by the requirements of the project.&lt;/p&gt;
&lt;p&gt;Virtualenv creates the hierarchy, installs a copy of the current Python
interpreter that you are using, the standard library, as well as &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt; and sets up some scripts which can be sourced to add the
hierarchy to your environment. From there you source the environment
scripts as so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
source python-2.7.4/bin/activate
&lt;/pre&gt;
&lt;p&gt;And then you're ready to go.&lt;/p&gt;
&lt;p&gt;The presence of &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; in this new location makes it fantastically easy to install new
modules to that virtual environment. The &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; script will put that
&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; executable on your &lt;tt class="docutils literal"&gt;PATH&lt;/tt&gt; and invocations of it will install modules
to your new environment.&lt;/p&gt;
&lt;p&gt;So then, whenever you have a project with a particular set of requirements,
create a new virtualenv location, source the script, &lt;tt class="docutils literal"&gt;pip install&lt;/tt&gt; your
requirements and away you go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="minor-issues"&gt;
&lt;h2&gt;Minor Issues&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; scripts do not attempt to set or change your &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt;.  I
found this confusing at first but the new install of Python is already hardcoded
to check its local &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;site-packages&lt;/span&gt;&lt;/tt&gt; directory and everything is installed in
there so the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; is not required.&lt;/p&gt;
&lt;p&gt;This complicated things when transitioning from my previous set up to using more
virtualenv locations as my &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; was still set to my &lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt;
install which would be preferentially picked up over the modules in the
virtualenv which rather defeated the point.&lt;/p&gt;
&lt;p&gt;This is fixable by no longer setting a &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; in my &lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt; but then
my small workflow scripts started failing as they wanted to find modules in
&lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt; and that was no longer exposed. My approach to solving this is
simply to create some additional virtual environments under &lt;tt class="docutils literal"&gt;$HOME/local&lt;/tt&gt;
which represent a useful grab-bag of modules for these scripts and then write
a shell wrapper to source the virtual environment &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; script and then
run the original Python file.&lt;/p&gt;
&lt;p&gt;So my, previously Python, &lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; script has now become a shell script which
looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/sh

# Source the appropriate virtualenv
. /home/mike/local/python/python-2.7.4/bin/activate

jump-impl
&lt;/pre&gt;
&lt;p&gt;Where &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;jump-impl&lt;/span&gt;&lt;/tt&gt; contains the contents of the original &lt;tt class="docutils literal"&gt;jump&lt;/tt&gt; script and
happily finds the &lt;tt class="docutils literal"&gt;yaml&lt;/tt&gt; module that I've installed to the virtual environment
in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/home/mike/local/python/python-2.7.4&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Journal - Day 9</title><link href="http://michaeljones.github.io/blog/posts/2013/10/17/journal-day-9/" rel="alternate"></link><updated>2013-10-17T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-17:posts/2013/10/17/journal-day-9/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 11 of Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Write a blog post about virtual env.&lt;/li&gt;
&lt;li&gt;Grab source code for 0ad from &lt;a class="reference external" href="https://github.com/0ad/0ad"&gt;github&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Investigate Breathe ticket &lt;a class="reference external" href="https://github.com/michaeljones/breathe/issues/70"&gt;#70&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished chapter 11. Tackling Applicative Functors and Monoids. I am beginning
to get the feeling that Haskell is not a complex language but there are a lot
of best practices and design patterns, like Applicative Functors and Monoids,
that they have built on top of base language which are all required for
understanding the programs out there.&lt;/p&gt;
&lt;p&gt;It is like having to learn C++ and the whole &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Design_Patterns"&gt;Gang of Four&lt;/a&gt; before starting
on a C++ project. Sort of. It is harder, I think, as the C++ syntax is
relatively minimal in some ways so you'd be able to understand a lot of the
design patterns without learning them from reference. You might not know
exactly why they are done but you could see what is happening. I feel like
that is harder in Haskell but only because the abstractions they build up are
in some ways more complex and in some ways expressed more tersely which makes
them less approachable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Wrote &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/17/discovering-virtualenv/"&gt;this blog post&lt;/a&gt; about virtual env. Part of me is appalled by the idea,
I know how late I am to the virtual env game and none of this should be new
news, however part of me understands that sometimes random blogs posts can be
useful to the people who stumble across them and they are always helpful to
their writer so I'm trying to embrace that style of thought.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Failed to grab the source code for 0ad. I did however play it for a bit and
managed not to get slaughtered by the first wave of attack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Failed to investigate Breathe ticket #70.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Forked and started some refactoring work on &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;rigcontrols&lt;/a&gt;. Trying to get a feel
for the code base and the best direction forward for it. It is revealing my
lack of familiarity with Qt though I have worked with quite a few basic Qt
interfaces.&lt;/p&gt;
&lt;p&gt;The interface is currently Qt 4.8 based. I would be enthusiastic to port it to
Qt 5 purely out of interest but I don't think that is going to happen.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 8</title><link href="http://michaeljones.github.io/blog/posts/2013/10/16/journal-day-8/" rel="alternate"></link><updated>2013-10-16T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-16:posts/2013/10/16/journal-day-8/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 9 of Learn You a Haskell and start on chapter 10.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finished chapter 9, read chapter 10 and starter on chapter 11.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What can I say, it was a sunny day.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 7</title><link href="http://michaeljones.github.io/blog/posts/2013/10/15/journal-day-7/" rel="alternate"></link><updated>2013-10-15T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-15:posts/2013/10/15/journal-day-7/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 8 and read chapter 9 of Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Figure out how to do something basic with the Yaml library.&lt;/li&gt;
&lt;li&gt;Finish work on image support in Breathe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finished chapter 8 and read half of chapter 9. They are really long chapter, I
swear.&lt;/li&gt;
&lt;li&gt;I did not yet figure out some basics with Yaml library but editing one of the
examples given in LYAH allowed me to feel a little more confident about my
progress with the language.&lt;/li&gt;
&lt;li&gt;Finished up the image support and closed the ticket. The user has further use
cases but admits that they are non-standard.&lt;/li&gt;
&lt;li&gt;Also played a little bit of 0ad and looked through the contribution pages. I
have no idea why they are still on svn but they do at least have a github
&lt;a class="reference external" href="https://github.com/0ad/0ad"&gt;mirror&lt;/a&gt;. I got beaten pretty hard by the AI and did a panic-quit rather than
watch my town go down in flames.&lt;/li&gt;
&lt;li&gt;Watched a &lt;a class="reference external" href="http://channel9.msdn.com/Blogs/Charles/Alexandrescu-Bright-Meijer-Moran-Pure-versus-Native-and-much-more"&gt;discussion&lt;/a&gt; on D &amp;amp; Haskell and their development and ecosystems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 6</title><link href="http://michaeljones.github.io/blog/posts/2013/10/14/journal-day-6/" rel="alternate"></link><updated>2013-10-14T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-14:posts/2013/10/14/journal-day-6/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finish chapter 6 and read chapter 7 from Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Look into supporting the image syntax from Doxygen in Breathe. &lt;a class="reference external" href="https://github.com/michaeljones/breathe/issues/67"&gt;Ticket&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Compile a program which reads a yaml file using the &lt;a class="reference external" href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; library in Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Finished chapter 6, read chapter 7 and half of chapter 8. It is a really good
book.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Made a first pass at supporting image syntax in Breathe. Pushed changes for
review by user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Compiled a program which pulls in the Yaml package but I have not figured out
how to use it yet. I did learn about the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-package&lt;/span&gt;&lt;/tt&gt; flag for &lt;tt class="docutils literal"&gt;ghc&lt;/tt&gt; though
which is a step:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ghc -package yaml blah.hs
&lt;/pre&gt;
&lt;p&gt;Then you can do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import qualified Data.Yaml as Y
&lt;/pre&gt;
&lt;p&gt;In your actual program.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Links</title><link href="http://michaeljones.github.io/blog/posts/2013/10/14/links/" rel="alternate"></link><updated>2013-10-14T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-14:posts/2013/10/14/links/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hackflow.com/blog/2013/10/13/functional-python-made-easy/"&gt;Funcy&lt;/a&gt; Python module for functional programming made easy. &lt;a class="reference external" href="https://news.ycombinator.com/item?id=6542224"&gt;Discussion&lt;/a&gt; on
Hacker News.&lt;/li&gt;
&lt;li&gt;New &lt;a class="reference external" href="http://sourceforge.net/p/cppcheck/news/2013/10/cppcheck-162/"&gt;CppCheck&lt;/a&gt; release. I only used it briefly at work but it is open source
and does static analysis of your C++ code to help point out potential issues.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>End of Week 1</title><link href="http://michaeljones.github.io/blog/posts/2013/10/13/end-of-week-1/" rel="alternate"></link><updated>2013-10-13T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-13:posts/2013/10/13/end-of-week-1/</id><summary type="html">&lt;div class="section" id="weekend"&gt;
&lt;h2&gt;Weekend&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Worked through chapter 5 and half of chapter 6 of Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Installed ghc-7.6.3 and haskell-platform-2013.2.0.0 using &lt;a class="reference external" href="http://askubuntu.com/questions/286764/how-to-install-haskell-platform-for-ubuntu-13-04/316465#316465"&gt;these&lt;/a&gt; instructions
as Ubuntu seems to have made some potentially odd choices for the version of
ghc they shipped on 13.04 so there isn't a packaged haskell-platform available
for it.&lt;/li&gt;
&lt;li&gt;Began to look at &lt;a class="reference external" href="http://cppreference.com"&gt;cppreference.com&lt;/a&gt; to see if there is anything I could
contribution to the community driven project.&lt;/li&gt;
&lt;li&gt;Downloaded &lt;a class="reference external" href="http://play0ad.com/"&gt;0ad&lt;/a&gt; from Ubuntu repositories with the intention of checking it out
as an open source game.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="week-in-review"&gt;
&lt;h2&gt;Week in Review&lt;/h2&gt;
&lt;p&gt;I had such grand plans moving into this period of personal work. This first week
has been an education in the realities of it all. Mostly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;It is lonely to work from home all day. I am not an enormously social creature
but I certainly miss having colleagues around.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Learning Haskell takes a long time. Coming from imperative programming
languages, it feels like starting again. This is what people say so it
should not have been surprising but I guess I'm not used to feeling
unproductive in a programming environment.&lt;/p&gt;
&lt;p&gt;That said, this is the third time I've tried to read through Haskell tutorials
and work through some issues and it is beginning to feel a little more
familiar, a little less alien. Completing basic tasks in the pure functional
side of things is new feeling easy which is a start. IO and more complex
programs still await.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;As mentioned &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/10/journal-day-4/"&gt;previously&lt;/a&gt;, the guide I have followed for learning Haskell this
week included more complex problems focussed on simple parts of the language
than I feel I would like. I would rather be learning more about the language
on simpler problems. I feel that if I'm trying to learn a language but
spending significant time trying to understand the actual problem rather than
its solution then I am focussing on the wrongs things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;It is rewarding to engage with people on open source projects. It is fair to
expect certain amount of effort on this part as well. Supporting open source
projects is not customer service as much as guide collaboration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="wishlist"&gt;
&lt;h2&gt;Wishlist&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;More simple problems to tackle in Haskell. I think this is potentially
difficult without introducing IO, but I would argue that it might make sense
to introduce some very basic, even unexplained, IO in order to be able to
tackle some more problems with the rest of the language.&lt;/li&gt;
&lt;li&gt;I find myself wanting a Haskell style guide. It is hard to know, as a
beginner, when to use &lt;tt class="docutils literal"&gt;where&lt;/tt&gt; vs &lt;tt class="docutils literal"&gt;let .. in&lt;/tt&gt;, when to declare another
independent function vs using &lt;tt class="docutils literal"&gt;where&lt;/tt&gt;, etc., and how many function calls can
be put in a row before it is deemed unreadable and other mechanisms, like local
bindings, should be introduced to improve readability.&lt;/li&gt;
&lt;li&gt;More talks on basic Haskell and introductions to the language. Simon
Peyton-Jones' talks were great but initial googling is no uncovering any more.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 5</title><link href="http://michaeljones.github.io/blog/posts/2013/10/11/journal-day-5/" rel="alternate"></link><updated>2013-10-11T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-11:posts/2013/10/11/journal-day-5/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read first 6 chapters of Learn You a Haskell for Great Good.&lt;/li&gt;
&lt;li&gt;Further investigate quickstart issue for Breathe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read the first 4 chapters of Learn You a Haskell.&lt;/li&gt;
&lt;li&gt;Pushed a fix for a possible KeyError in the project handling code for Breathe.&lt;/li&gt;
&lt;li&gt;Took a cursory look at contributing to the Libre Office project. Their
&lt;a class="reference external" href="http://www.libreoffice.org/developers/"&gt;developers&lt;/a&gt; page is the place to start with their &lt;a class="reference external" href="https://wiki.documentfoundation.org/Easy_Hacks"&gt;easy hacks&lt;/a&gt; page being an
early target, I imagine. I have no particular love for the Libre Office project,
but a great deal of respect as I have used it often.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 4</title><link href="http://michaeljones.github.io/blog/posts/2013/10/10/journal-day-4/" rel="alternate"></link><updated>2013-10-10T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-10:posts/2013/10/10/journal-day-4/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Work through the &lt;strong&gt;#31&lt;/strong&gt; to &lt;strong&gt;#41&lt;/strong&gt; Haskell problems.&lt;/li&gt;
&lt;li&gt;Read first 6 chapters of Learn You a Haskell for Great Good.&lt;/li&gt;
&lt;li&gt;Fix issue reported in the Breathe quick-start documentation.&lt;/li&gt;
&lt;li&gt;Look into curses development in Haskell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;I spent a long time looking at Haskell problem &lt;strong&gt;#27&lt;/strong&gt; and then went on to
other things. I think it is an interesting problem and I should be able to do
it, however it is beginning to frustrate me for other reasons.&lt;/p&gt;
&lt;p&gt;The issue is my approach: I'm treating this list of problems as a good
introduction to Haskell but it isn't really. It is a set of interesting
problems of growing difficulty which can be solved with Haskell if you want.
The issue is that they aren't designed to introduce you to different parts of
the language and in particular they start asking complex problems which simple
parts of the language instead of simple problems with increasingly complex
parts of the language. I'm not learning Haskell here; I'm learning parts of
mathematics instead. An excellent destination but not where I'm going.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://stackoverflow.com/a/1016986"&gt;stackoverflow post&lt;/a&gt; which suggests
these problems alse suggests the &lt;a class="reference external" href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt;
problems another source to work through but they suffer from exactly the same
issues.&lt;/p&gt;
&lt;p&gt;Perhaps the average person interested in Haskell has a mathematical background
and so these problems, which really aren't that hard, are more bread and
butter to them. For me, I'm going to have to find another path. Perhaps
focussing on Learn You a Haskell and then trying to replace some of my
various workflow helper scripts with Haskell versions as a test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ironically, I did not get around to reading the Learn You a Haskell chapters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I could not reproduce the issue with the Breathe quickstart documentation,
though more investigation might uncover it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I did not look into curses development.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did go to the gym, tour the New Zealand parliament, have a singing lesson and
have drinks with friends. Some days have other ideas than coding.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Journal - Day 3</title><link href="http://michaeljones.github.io/blog/posts/2013/10/09/journal-day-3/" rel="alternate"></link><updated>2013-10-09T09:01:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-09:posts/2013/10/09/journal-day-3/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue &lt;strong&gt;99 Haskell Problems&lt;/strong&gt; and reach #25.&lt;/li&gt;
&lt;li&gt;Finish up work for Breathe ticket &lt;strong&gt;#65&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Listen to &lt;strong&gt;A Taste of Haskell - Part 2&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reached Haskell Problem #26 but only by skipping the ones involving random
numbers which I did at the recommendations of this post.&lt;/li&gt;
&lt;li&gt;Finished up &lt;strong&gt;#65&lt;/strong&gt; on Breathe which turned out to be easier than expected. I
still do not understand the constructors for the docutils node classes.&lt;/li&gt;
&lt;li&gt;Watched the second part of &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-2/"&gt;A Taste of Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Also watched an &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/09/video-rust-infoq/"&gt;introductory talk&lt;/a&gt; on Rust.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="todo"&gt;
&lt;h2&gt;Todo&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Email docutils list for explanation of constructors.&lt;/li&gt;
&lt;li&gt;Extend folder navigation script to source python virtualenv where desirable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Video: Rust - InfoQ</title><link href="http://michaeljones.github.io/blog/posts/2013/10/09/video-rust-infoq/" rel="alternate"></link><updated>2013-10-09T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-09:posts/2013/10/09/video-rust-infoq/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.infoq.com/presentations/Rust"&gt;Short talk&lt;/a&gt; about the Rust
programming language from Mozilla. Excellent broad overview of the language
which gives a feel for what inspired it and what it is trying to achieve.&lt;/p&gt;
&lt;p&gt;To a C++ programmer that is growing frustrated with the growing complexity of
the language, Rust feels like it is a good thing.&lt;/p&gt;
&lt;p&gt;References the following blogs for more information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://smallcultfollowing.com/babysteps/"&gt;Baby Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pcwalton.github.com"&gt;pcwalton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="rust"></category></entry><entry><title>Journal - Day 2</title><link href="http://michaeljones.github.io/blog/posts/2013/10/08/journal-day-2/" rel="alternate"></link><updated>2013-10-08T10:01:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-08:posts/2013/10/08/journal-day-2/</id><summary type="html">&lt;div class="section" id="intentions"&gt;
&lt;h2&gt;Intentions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue 99 Haskell Problems and reach no. 20.&lt;/li&gt;
&lt;li&gt;Chase up support tickets #65 &amp;amp; #66 on Breathe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Reached problem no. 17. Definitely learning a bit more about haskell whilst
still only juggling lists in various ways. I would kill for some easily
approachable code that did some real work but all in good time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ticket #66 remains inactive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ticket #65 resulted in more work than anticipated as the problem is
non-standard. Potential for interesting work for fixing it but it took a while
to get back into the Breathe set up which I have neglected for a while.&lt;/p&gt;
&lt;p&gt;Getting to play around with virtualenv a little more though which is something
I've been late in picking up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Video: Taste of Haskell - Part 1</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-1/" rel="alternate"></link><updated>2013-10-07T19:01:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-07:posts/2013/10/07/video-taste-of-haskell-part-1/</id><summary type="html">&lt;p&gt;An &lt;a class="reference external" href="http://blip.tv/oreilly-open-source-convention/oscon-2007-simon-peyton-jones-a-taste-of-haskell-part-i-329701"&gt;OSCON 2007 talk&lt;/a&gt;
introducing Haskell to imperative programmers by Simon Peyton Jones.&lt;/p&gt;
&lt;p&gt;I like his pacing and attitude and I think there is a reasonable amount to be
learnt despite the fact that the slides are not provided on the site or
displayed in the video. I am sure they can be tracked down.&lt;/p&gt;
&lt;p&gt;I can't tell at the moment how much I understood purely from the quality of the
talk and how much from the previous efforts I've made to get to grips with
Haskell.&lt;/p&gt;
</summary><category term="haskell"></category></entry><entry><title>Journal - Day 1</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/journal-day-1/" rel="alternate"></link><updated>2013-10-07T15:01:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-07:posts/2013/10/07/journal-day-1/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;I have managed to get this &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; based blog
up. I choose Pelican because a simple google unearthed &lt;a class="reference external" href="http://pydanny.com/choosing-a-new-python-based-blog-engine.html"&gt;this&lt;/a&gt; from
pydanny with a comment from Kenneth Reitz and that is enough of an endorsement
for me.&lt;/p&gt;
&lt;p&gt;Plus I like rst.&lt;/p&gt;
&lt;p&gt;Things, like URLs, might chop and change for a bit whilst I figure this out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Done the first 7 of the 99 Haskell Problems with a combination of half
forgotten memories and referring to &lt;a class="reference external" href="http://learnyouahaskell.com/"&gt;Learn You a Haskell&lt;/a&gt;. My efforts are stumbling and awkward and
nothing works first time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I watched &lt;a class="reference external" href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-1/"&gt;Simon Peyton-Jones - A Taste of Haskell Part I&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Beginning</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/beginning/" rel="alternate"></link><updated>2013-10-07T13:46:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-07:posts/2013/10/07/beginning/</id><summary type="html">&lt;p&gt;I am embarking on some time for some personal projects and this blog is designed
to mark my progress and keep on track. I am currently far from clear about what
to work on but I have a few loose ideas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Experiment with the &lt;a class="reference external" href="http://www.rust-lang.org/"&gt;Rust&lt;/a&gt; language and get a
feel for how to compares with C++.&lt;/p&gt;
&lt;p&gt;I am keen to pursue Rust as I have a reasonable and growing amount of
experience with C++ and would love to see a replacement with equal power but
less cruft.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Explore &lt;a class="reference external" href="http://clojure.org/"&gt;Clojure&lt;/a&gt; as a lisp and a language on the JVM.&lt;/p&gt;
&lt;p&gt;I have been watching some of Rich Hickey's Greatest Hits and still yearn for
that moment of enlightenment which legend suggests is brought on by
understanding lisp.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Become familiar with Haskell and work through the &lt;a class="reference external" href="http://www.haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems"&gt;99 Haskell problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More and more the functional approaches to coding intrigue me and feel like
the correct way forward. What can be more functional than Haskell?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Continue to support &lt;a class="reference external" href="https://github.com/michaeljones/breathe"&gt;Breathe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My Sphinx-Doxygen bridge project which has a small community of users and a
low but steady stream of requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Push forward with development on build and environment system prototype built
on &lt;a class="reference external" href="martine.github.io/ninja"&gt;Ninja&lt;/a&gt; and inspired by &lt;a class="reference external" href="https://github.com/nerdvegas/rez"&gt;Rez&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A prototype built at my last place of work seemed to have curious potential to
it. I'd like to push it to the point where it succeeds or breaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Explore programming with audio.&lt;/p&gt;
&lt;p&gt;I have a few musical outlets in my life and I find myself increasingly
interested in how it is represented in data and how malleable it might be in
that form.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Help with my brother's &lt;a class="reference external" href="https://github.com/Everzen/RigControls"&gt;Rig Controls&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;It has promise and a family connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Improve my knowledge of Open GL &amp;amp; SDL.&lt;/p&gt;
&lt;p&gt;I have been in graphics for too long without getting to grips with either.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Video: Taste of Haskell - Part 2</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-2/" rel="alternate"></link><updated>2013-10-07T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io/blog,2013-10-07:posts/2013/10/07/video-taste-of-haskell-part-2/</id><summary type="html">&lt;p&gt;Second half of the Simon Peyton-Jones' introduction to Haskell. If I was not
convinced before, I am now; this is a really excellent talk to give you some
background to Haskell and some pleasantly gentle steps towards understanding it.&lt;/p&gt;
&lt;p&gt;Provides examples of pure functions and combining them with code that needs to
do the IO before going on to discuss the wider Haskell community.&lt;/p&gt;
&lt;p&gt;I really love his presentation manner. It is quite disarming.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blip.tv/oreilly-open-source-convention/oscon-2007-simon-peyton-jones-a-taste-of-haskell-part-ii-330372"&gt;Talk&lt;/a&gt;
and &lt;a class="reference external" href="http://research.microsoft.com/en-us/um/people/simonpj/papers/haskell-tutorial/"&gt;slides&lt;/a&gt;
(required as the video does not show them.)&lt;/p&gt;
</summary><category term="haskell"></category></entry></feed>